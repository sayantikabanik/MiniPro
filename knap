Q. Implement in java the 0/1 knapsack problem using (a) Dynamic programming (b) Greedy Method


(a) Dynamic Programming
import java.util.*;
class dynamicknapsack
{
    static int max(int a,int b)
    {
         return ((a>b)?a:b);
    }
    static int dynamicknapsack(int m,int wt[],int p[],int n)
    {
         if(n==0||m==0)
               return 0;
        if(wt[n-1]>m)
            return dynamicknapsack(m,wt,p,n-1);
        else
           return(max(p[n-1]+dynamicknapsack(m-wt[n-1],wt,p,n-1),dynamicknapsack(m,wt,p,n-1)));
    }
    public static void main(String args[])
    {
         Scanner sc=new Scanner(System.in);
         System.out.println("Enterof objects");
         int n=sc.nextInt();
         System.out.println("Entercity");
         int m=sc.nextInt();
         int p[]=new int[n];
         int wt[]=new int[n];
         for(int i=0;i<n;i++)
         {
               System.out.println("Enterit and Weight of object"+(i+1));
               p[i]=sc.nextInt();
               wt[i]=sc.nextInt();
         }
        System.out.println("Profitdynamicknapsack(m,wt,p,n));
    }
}


(b) Greedy Method


import java.util.*;
class knap
{
      static float knap(float m,float wt[],float p[],int n)
      {
            float u=m,profit=0;
            float x[]=new float[n];
            int i;
            for(i=0;i<n;i++)
                x[i]=0;
           for(i=0;i<n;i++)
           {
               if(wt[i]>u)
                  break;
               x[i]=1;
               u-=wt[i];
              profit+=p[i]*x[i];
          }
          if(i<n)
               x[i]=u/wt[i];
          profit+=p[i]*x[i];
          return profit;
    }
    public static void main(String args[])
    {
         Scanner sc=new Scanner(System.in);
        System.out.println("Enterof objects");
        int n=sc.nextInt();
        System.out.println("Entercity");
        float m=sc.nextInt();
        float p[]=new float[n];
        float wt[]=new float[n];
        for(int i=0;i<n;i++)
        {
             System.out.println("Enterit and Weight of object"+(i+1));
             p[i]=sc.nextInt();
             wt[i]=sc.nextInt();
        }
        System.out.println("Profitknap(m,wt,p,n));
   }
}
